// ECE:3350 sisc processor project
// This program tests arithmetic instructions from Part 1.

00000000 //00: NOP
88100001 //01: ADI  R1,R0,1      R1 <- R0 + (0x0000)0001
80211001 //02: ADD  R2,R1,R1     R2 <- R1 + R1
8032200B //03: SHL  R3,R2,R2     R3 <- R2 << [R2]
80412002 //04: SUB  R4,R1,R2     R4 <- R1 - R2
8044300A //05: SHR  R4,R4,R3     R4 <- R4 >> [R3]
80234007 //06: XOR  R2,R3,R4     R2 <- R3 ^ R4
80220004 //07: NOT  R2,R2        R2 <- ~R2
80421009 //08: RTL  R4,R2,R1     R4 <- R2 <.< [R1]
80524005 //09: OR   R5,R2,R4     R5 <- R2 | R4
80324006 //0A: AND  R3,R2,R4     R3 <- R2 & R4
00000000 //0B: NOP

// At this point, registers should be as follows:
// R1: 00000001		R4: FE000011
// R2: FF000008		R5: FF000019
// R3: FE000000		R0, R6-R15: 00000000

88100001 //0C: ADI  R1,R0,1      R1 <- R0 + (0x0000)0001 (STAT: 0000)
80211002 //0D: SUB  R2,R1,R1     R2 <- R1 - R1           (STAT: 0001)
80201002 //0E: SUB  R2,R0,R1     R2 <- R0 - R1           (STAT: 1010)
80311008 //0F: RTR  R3,R1,R1     R3 <- R1 >> [R1]
80423001 //10: ADD  R4,R2,R3     R4 <- R2 + R3           (STAT: 1100)
00000000 //11: NOP

// This program tests branch instructions with two nested loops

80400001 //12:     ADD  R4,R0,R0     R4 <- R0 + R0             Clear R4
6100001D //13:     BNE  #1,L3        PC <- 0x001D              If R4 != 0, branch to L3
88100001 //14:     ADI  R1,R0,1      R1 <- R0 + 0x(0000)0001   Set R1 = 1
88200004 //15:     ADI  R2,R0,4      R2 <- R0 + 0x(0000)0004   Set R2 = 4
8822FFFF //16: L1: ADI  R2,R2,-1     R2 <- R2 - 1              Decrement R2
51000005 //17:     BRR  #1,L3        PC <- (PC+1) + 5          If R2 = 0, branch to L3
88320000 //18:     ADI  R3,R2,0      R3 <- R2 + 0x(0000)0000   Set R3 = R2
88440001 //19: L2: ADI  R4,R4,1      R4 <- R4 + 0x(0000)0001   Increment R4
80331002 //1A:     SUB  R3,R3,R1     R3 <- R3 - R1             Decrement R3
7100FFFD //1B:     BNR  #1 L2        PC <- (PC+1) - 3          If R3 != 0, branch to L2
60000016 //1C:     BNE  #0,L1        PC <- 0x0016 (uncond.)    Branch to L1
F0000000 //1D: L3: HALT                                        Halt program

// At this point, registers should be as follows:
//   R1: 00000001		R4: 00000006
//   R2: 00000000		R5: FF000019
//   R3: 00000000		R0, R6-R15: 00000000




